// Generated by CoffeeScript 1.6.2
(function() {
  var AttachedFile, Processor, Storage, exports, extensions, fs, inflect, path;

  inflect = require("inflect");

  path = require("path");

  Processor = require("./processor");

  Storage = require("./storage");

  fs = require('fs');

  extensions = {
    "image/jpeg": ".jpg",
    "image/png": ".png",
    "image/gif": ".gif"
  };

  exports = module.exports = AttachedFile = (function() {
    function AttachedFile(id, options) {
      this.id = id;
      if (options == null) {
        options = {};
      }
      this.modelName = inflect.underscore(options.modelName);
      this.modelId = options.modelId;
      this.attributeName = inflect.underscore(options.attributeName);
      this.styles = options.styles || [];
      this.store = new Storage(this);
      this.s3Headers = options.s3Headers || {};
      this.file = options.file;
      if (this.file) {
        this.fileName = this.file.name;
        this.extension = extensions[this.file.type] || path.extname(this.fileName);
      }
    }

    AttachedFile.prototype.save = function(cb) {
      var _this = this;

      return fs.exists(this.file.path, function(exists) {
        var processor;

        if (exists) {
          _this.store.pendingWrites.push({
            style: 'original',
            file: _this.file.path
          });
          processor = new Processor(_this.file, {
            styles: _this.styles
          });
          processor.on('convert', function(result) {
            return _this.store.pendingWrites.push(result);
          });
          processor.on('done', function() {
            return _this.store.flushWrites(cb);
          });
          processor.on('error', cb);
          return processor.convert();
        } else {
          return cb("Source file not found: " + _this.file.path);
        }
      });
    };

    AttachedFile.prototype.remove = function(cb) {
      var name;

      this.store.pendingDeletes.push({
        style: 'original'
      });
      for (name in this.styles) {
        this.store.pendingDeletes.push({
          style: name
        });
      }
      return this.store.flushDeletes(cb);
    };

    AttachedFile.prototype.path = function(style) {
      return this.store.path(style);
    };

    AttachedFile.prototype.url = function(style) {
      return this.store.url(style);
    };

    return AttachedFile;

  })();

}).call(this);
