// Generated by CoffeeScript 1.3.3
(function() {
  var AttachedFile, Processor, Storage, exports, extensions, inflect;

  inflect = require("inflect");

  Processor = require("./processor");

  Storage = require("./storage");

  extensions = {
    "image/jpeg": ".jpg",
    "image/png": ".png",
    "image/gif": ".gif"
  };

  exports = module.exports = AttachedFile = (function() {

    function AttachedFile(id, options) {
      var _ref;
      this.id = id;
      this.options = options != null ? options : {};
      this.modelName = inflect.underscore(this.options.modelName);
      this.attributeName = inflect.underscore(this.options.attributeName);
      this.styles = this.options.styles || [];
      this.store = new Storage(this);
      this.s3Headers = this.options.s3Headers || {};
      this.file = this.options.file;
      if (this.file) {
        this.fileName = this.file.name;
        if (extensions[this.file.type]) {
          if ((_ref = this.fileName) != null) {
            _ref.replace(/(\..*?)$/, extensions[this.file.type]);
          }
        }
      }
      this.pathAttributes = {
        id: this.id,
        modelName: this.modelName,
        attributeName: this.attributeName,
        fileName: this.fileName
      };
    }

    AttachedFile.prototype.save = function(cb) {
      var processor,
        _this = this;
      this.store.pendingWrites.push({
        style: 'original',
        file: this.file.path
      });
      processor = new Processor(this.file, {
        styles: this.styles
      });
      processor.on('convert', function(result) {
        return _this.store.pendingWrites.push(result);
      });
      processor.on('done', function() {
        return _this.store.flushWrites(cb);
      });
      processor.on('error', cb);
      return processor.convert();
    };

    AttachedFile.prototype.remove = function(cb) {
      var name;
      this.store.pendingDeletes.push({
        style: 'original'
      });
      for (name in this.styles) {
        this.store.pendingDeletes.push({
          style: name
        });
      }
      return this.store.flushDeletes(cb);
    };

    AttachedFile.prototype.path = function(style) {
      return this.store.path(style);
    };

    AttachedFile.prototype.url = function(style) {
      return this.store.url(style);
    };

    return AttachedFile;

  })();

}).call(this);
